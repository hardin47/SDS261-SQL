---
title: "Lab 2 - SQL clauses"
author: "your name goes here"
date: "due 10am Wednesday, January 10, 2024"
format: 
  unilur-html: default
  unilur-html+solution:
    output-file: lab2_clauses_sds261_j24_sol.html
execute:
  echo: true
  warning: false
  message: false
---

```{r}
#| unilur-solution: true

library(tidyverse)
library(DBI)
library(RMariaDB)
library(dbplyr)
library(mdsr)
```

Today's lab will provide practice working with **SQL** clauses in **DBeaver**.  Don't forget the importance of the <a href = "https://st47s.com/SDS261/Notes/03-sql-verbs.html" target = "_blank">order of the **SQL** clauses</a>. 

The goals for lab 2 include:

* working with clauses in **SQL**.
* understanding each of `SELECT`, `FROM`, `WHERE`, `GROUP BY`, `HAVING`, `ORDER BY`, and `LIMIT`.
* practicing running **SQL** queries in a **SQL** client, **DBeaver**.



## Advice for turning in the assignment

* Be sure to indicate (in the .sql file) which problem is being answered with which **SQL** code.  Use the following syntax to comment within a .sql file: `/* here is where comments go */`.  Indeed, feel free to *copy the question* into the .sql file so that you have it for your own records.

* save the .Rproj file somewhere you can find it.  Don't keep everything in your downloads folder.  Maybe make a folder called `SDS261` or something.  That folder could live on your Desktop.  Or maybe in your Dropbox.  

* The **SQL** document should be saved in the **R** Project as `lab2-sds261-yourlastname-yourfirstname.sql`.  You will have to navigate to the **R** Project to save the **DBeaver** file in the correct place.

* Connect to the `nyctaxi` database, which contains the `yellow_old` table.

```{r}
#| echo: false

con_taxi <- DBI::dbConnect(
  RMariaDB::MariaDB(),
  dbname = "nyctaxi",
  host = "mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com",
  user = "mdsr_public",
  password = "ImhsmflMDSwR"
)
```


##  Assignment

1. Select the `trip_distance` and `total_amount` columns from the `yellow_old` table. For safety (i.e., not crashing your computer), only return the first 5 rows.

2. Using the `AVG()` function, find the average total amount paid in the `yellow_old` table.

```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT AVG(total_amount)
FROM yellow_old
LIMIT 0, 5;
```

3. Which type of payment had the highest `total_amount`?  How much was it?

4. How many taxi trips happened on each day of the week?

5. Which day of the week had the longest `trip_distance`?

6. How many different `rate_code`s are given in the dataset?

```{sql}
#| connection: con_taxi
#| unilur-solution: true

/*use distinct*/
```

7. Find the average `total_amount` for weekend rides. (Hint: you will need to use `HAVING`, and it might be slow.)

```{block}
#| unilur-solution: true

Approach: 
What do you want?	
the movies.
Which tables and for what?
movies for the movie name
Conditions?
The movies must be sci-fi movies
The categories need to be ordered by the investment ratio
Anything else?
Semicolon
```



```{r}
dbDisconnect(con_taxi)
```